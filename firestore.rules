rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to access their own data
    // Using user UID as the document ID
    match /users/{userId} {
      allow read, write, create: if request.auth != null &&
        request.auth.uid == userId;

      // Allow access to subcollections (clients, sessions, payments, workoutPlans)
      // Only the owner user can access their subcollections
      match /{collection}/{document} {
        allow read, write, create, delete: if request.auth != null &&
          request.auth.uid == userId;
      }
    }

    // Trainers collection - authenticated trainers can access their own data
    match /trainers/{trainerId} {
      allow read, write, create: if request.auth != null &&
        (request.auth.uid == trainerId || request.auth.token.email == trainerId);

      // Marketing subcollections for trainers
      match /campaigns/{campaignId} {
        allow read, write, create, delete: if request.auth != null &&
          (request.auth.uid == trainerId || request.auth.token.email == trainerId);
      }

      match /leads/{leadId} {
        allow read, write, create, delete: if request.auth != null &&
          (request.auth.uid == trainerId || request.auth.token.email == trainerId);
      }

      match /referralLinks/{referralId} {
        allow read, write, create, delete: if request.auth != null &&
          (request.auth.uid == trainerId || request.auth.token.email == trainerId);
      }

      match /socialPosts/{postId} {
        allow read, write, create, delete: if request.auth != null &&
          (request.auth.uid == trainerId || request.auth.token.email == trainerId);
      }

      match /emailCampaigns/{campaignId} {
        allow read, write, create, delete: if request.auth != null &&
          (request.auth.uid == trainerId || request.auth.token.email == trainerId);
      }

      match /marketingAssets/{assetId} {
        allow read, write, create, delete: if request.auth != null &&
          (request.auth.uid == trainerId || request.auth.token.email == trainerId);
      }

      match /testimonials/{testimonialId} {
        allow read, write, create, delete: if request.auth != null &&
          (request.auth.uid == trainerId || request.auth.token.email == trainerId);
      }

      // Other existing subcollections
      match /{collection}/{document} {
        allow read, write, create, delete: if request.auth != null &&
          (request.auth.uid == trainerId || request.auth.token.email == trainerId);
      }
    }

    // Referrals collection - authenticated users can read/write
    match /referrals/{referralId} {
      allow read, write, create: if request.auth != null;
    }

    // sessionRecaps - only authenticated users can access
    match /sessionRecaps/{recapId} {
      allow read, write: if request.auth != null;
    }

    // Workout plans - only authenticated users can access
    match /workoutPlans/{planId} {
      allow read, write: if request.auth != null;
    }

    // Progress entries - only authenticated users can access
    match /progressEntries/{entryId} {
      allow read, write: if request.auth != null;
    }

    // Payments - only authenticated users can access
    match /payments/{paymentId} {
      allow read, write: if request.auth != null;
    }

    // Support tickets - authenticated users can create tickets
    // Support staff (with custom claims) can read and update all tickets
    match /supportTickets/{ticketId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.token.supportStaff == true);
    }

    // System Alerts - for support portal monitoring
    match /systemAlerts/{alertId} {
      // TEMPORARY: Allow all operations for support portal
      // TODO: Implement proper Firebase auth for support portal
      allow read, write: if true;
    }

    // Client Environments - for support portal client monitoring
    match /clientEnvironments/{environmentId} {
      // TEMPORARY: Allow reads for support portal
      // TODO: Implement proper Firebase auth for support portal
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.isSupport == true;
    }

    // Error Logs - for support portal debugging
    match /errorLogs/{logId} {
      // TEMPORARY: Allow all operations for support portal
      // TODO: Implement proper Firebase auth for support portal
      allow read, write: if true;
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
